(declare-fun digit_0 () (_ BitVec 64))
(declare-fun digit_1 () (_ BitVec 64))
(declare-fun digit_2 () (_ BitVec 64))
(declare-fun digit_3 () (_ BitVec 64))
(declare-fun digit_4 () (_ BitVec 64))
(declare-fun digit_5 () (_ BitVec 64))
(declare-fun digit_6 () (_ BitVec 64))
(declare-fun digit_7 () (_ BitVec 64))
(declare-fun digit_8 () (_ BitVec 64))
(declare-fun digit_9 () (_ BitVec 64))
(declare-fun digit_10 () (_ BitVec 64))
(declare-fun digit_11 () (_ BitVec 64))
(declare-fun digit_12 () (_ BitVec 64))
(declare-fun digit_13 () (_ BitVec 64))
(declare-fun w0 () (_ BitVec 64))
(declare-fun x1 () (_ BitVec 64))
(declare-fun x2 () (_ BitVec 64))
(declare-fun x3 () (_ BitVec 64))
(declare-fun z4 () (_ BitVec 64))
(declare-fun x5 () (_ BitVec 64))
(declare-fun x6 () (_ BitVec 64))
(declare-fun x7 () (_ BitVec 64))
(declare-fun y8 () (_ BitVec 64))
(declare-fun y9 () (_ BitVec 64))
(declare-fun y10 () (_ BitVec 64))
(declare-fun y11 () (_ BitVec 64))
(declare-fun z12 () (_ BitVec 64))
(declare-fun y13 () (_ BitVec 64))
(declare-fun y14 () (_ BitVec 64))
(declare-fun y15 () (_ BitVec 64))
(declare-fun y16 () (_ BitVec 64))
(declare-fun z17 () (_ BitVec 64))
(declare-fun w18 () (_ BitVec 64))
(declare-fun x19 () (_ BitVec 64))
(declare-fun x20 () (_ BitVec 64))
(declare-fun x21 () (_ BitVec 64))
(declare-fun z22 () (_ BitVec 64))
(declare-fun x23 () (_ BitVec 64))
(declare-fun x24 () (_ BitVec 64))
(declare-fun x25 () (_ BitVec 64))
(declare-fun y26 () (_ BitVec 64))
(declare-fun y27 () (_ BitVec 64))
(declare-fun y28 () (_ BitVec 64))
(declare-fun y29 () (_ BitVec 64))
(declare-fun z30 () (_ BitVec 64))
(declare-fun y31 () (_ BitVec 64))
(declare-fun y32 () (_ BitVec 64))
(declare-fun y33 () (_ BitVec 64))
(declare-fun y34 () (_ BitVec 64))
(declare-fun z35 () (_ BitVec 64))
(declare-fun w36 () (_ BitVec 64))
(declare-fun x37 () (_ BitVec 64))
(declare-fun x38 () (_ BitVec 64))
(declare-fun x39 () (_ BitVec 64))
(declare-fun z40 () (_ BitVec 64))
(declare-fun x41 () (_ BitVec 64))
(declare-fun x42 () (_ BitVec 64))
(declare-fun x43 () (_ BitVec 64))
(declare-fun y44 () (_ BitVec 64))
(declare-fun y45 () (_ BitVec 64))
(declare-fun y46 () (_ BitVec 64))
(declare-fun y47 () (_ BitVec 64))
(declare-fun z48 () (_ BitVec 64))
(declare-fun y49 () (_ BitVec 64))
(declare-fun y50 () (_ BitVec 64))
(declare-fun y51 () (_ BitVec 64))
(declare-fun y52 () (_ BitVec 64))
(declare-fun z53 () (_ BitVec 64))
(declare-fun w54 () (_ BitVec 64))
(declare-fun x55 () (_ BitVec 64))
(declare-fun x56 () (_ BitVec 64))
(declare-fun x57 () (_ BitVec 64))
(declare-fun z58 () (_ BitVec 64))
(declare-fun x59 () (_ BitVec 64))
(declare-fun x60 () (_ BitVec 64))
(declare-fun x61 () (_ BitVec 64))
(declare-fun y62 () (_ BitVec 64))
(declare-fun y63 () (_ BitVec 64))
(declare-fun y64 () (_ BitVec 64))
(declare-fun y65 () (_ BitVec 64))
(declare-fun z66 () (_ BitVec 64))
(declare-fun y67 () (_ BitVec 64))
(declare-fun y68 () (_ BitVec 64))
(declare-fun y69 () (_ BitVec 64))
(declare-fun y70 () (_ BitVec 64))
(declare-fun z71 () (_ BitVec 64))
(declare-fun w72 () (_ BitVec 64))
(declare-fun x73 () (_ BitVec 64))
(declare-fun x74 () (_ BitVec 64))
(declare-fun x75 () (_ BitVec 64))
(declare-fun z76 () (_ BitVec 64))
(declare-fun x77 () (_ BitVec 64))
(declare-fun x78 () (_ BitVec 64))
(declare-fun x79 () (_ BitVec 64))
(declare-fun y80 () (_ BitVec 64))
(declare-fun y81 () (_ BitVec 64))
(declare-fun y82 () (_ BitVec 64))
(declare-fun y83 () (_ BitVec 64))
(declare-fun z84 () (_ BitVec 64))
(declare-fun y85 () (_ BitVec 64))
(declare-fun y86 () (_ BitVec 64))
(declare-fun y87 () (_ BitVec 64))
(declare-fun y88 () (_ BitVec 64))
(declare-fun z89 () (_ BitVec 64))
(declare-fun w90 () (_ BitVec 64))
(declare-fun x91 () (_ BitVec 64))
(declare-fun x92 () (_ BitVec 64))
(declare-fun x93 () (_ BitVec 64))
(declare-fun z94 () (_ BitVec 64))
(declare-fun x95 () (_ BitVec 64))
(declare-fun x96 () (_ BitVec 64))
(declare-fun x97 () (_ BitVec 64))
(declare-fun y98 () (_ BitVec 64))
(declare-fun y99 () (_ BitVec 64))
(declare-fun y100 () (_ BitVec 64))
(declare-fun y101 () (_ BitVec 64))
(declare-fun z102 () (_ BitVec 64))
(declare-fun y103 () (_ BitVec 64))
(declare-fun y104 () (_ BitVec 64))
(declare-fun y105 () (_ BitVec 64))
(declare-fun y106 () (_ BitVec 64))
(declare-fun z107 () (_ BitVec 64))
(declare-fun w108 () (_ BitVec 64))
(declare-fun x109 () (_ BitVec 64))
(declare-fun x110 () (_ BitVec 64))
(declare-fun x111 () (_ BitVec 64))
(declare-fun z112 () (_ BitVec 64))
(declare-fun x113 () (_ BitVec 64))
(declare-fun x114 () (_ BitVec 64))
(declare-fun x115 () (_ BitVec 64))
(declare-fun y116 () (_ BitVec 64))
(declare-fun y117 () (_ BitVec 64))
(declare-fun y118 () (_ BitVec 64))
(declare-fun y119 () (_ BitVec 64))
(declare-fun z120 () (_ BitVec 64))
(declare-fun y121 () (_ BitVec 64))
(declare-fun y122 () (_ BitVec 64))
(declare-fun y123 () (_ BitVec 64))
(declare-fun y124 () (_ BitVec 64))
(declare-fun z125 () (_ BitVec 64))
(declare-fun w126 () (_ BitVec 64))
(declare-fun x127 () (_ BitVec 64))
(declare-fun x128 () (_ BitVec 64))
(declare-fun x129 () (_ BitVec 64))
(declare-fun z130 () (_ BitVec 64))
(declare-fun x131 () (_ BitVec 64))
(declare-fun x132 () (_ BitVec 64))
(declare-fun x133 () (_ BitVec 64))
(declare-fun y134 () (_ BitVec 64))
(declare-fun y135 () (_ BitVec 64))
(declare-fun y136 () (_ BitVec 64))
(declare-fun y137 () (_ BitVec 64))
(declare-fun z138 () (_ BitVec 64))
(declare-fun y139 () (_ BitVec 64))
(declare-fun y140 () (_ BitVec 64))
(declare-fun y141 () (_ BitVec 64))
(declare-fun y142 () (_ BitVec 64))
(declare-fun z143 () (_ BitVec 64))
(declare-fun w144 () (_ BitVec 64))
(declare-fun x145 () (_ BitVec 64))
(declare-fun x146 () (_ BitVec 64))
(declare-fun x147 () (_ BitVec 64))
(declare-fun z148 () (_ BitVec 64))
(declare-fun x149 () (_ BitVec 64))
(declare-fun x150 () (_ BitVec 64))
(declare-fun x151 () (_ BitVec 64))
(declare-fun y152 () (_ BitVec 64))
(declare-fun y153 () (_ BitVec 64))
(declare-fun y154 () (_ BitVec 64))
(declare-fun y155 () (_ BitVec 64))
(declare-fun z156 () (_ BitVec 64))
(declare-fun y157 () (_ BitVec 64))
(declare-fun y158 () (_ BitVec 64))
(declare-fun y159 () (_ BitVec 64))
(declare-fun y160 () (_ BitVec 64))
(declare-fun z161 () (_ BitVec 64))
(declare-fun w162 () (_ BitVec 64))
(declare-fun x163 () (_ BitVec 64))
(declare-fun x164 () (_ BitVec 64))
(declare-fun x165 () (_ BitVec 64))
(declare-fun z166 () (_ BitVec 64))
(declare-fun x167 () (_ BitVec 64))
(declare-fun x168 () (_ BitVec 64))
(declare-fun x169 () (_ BitVec 64))
(declare-fun y170 () (_ BitVec 64))
(declare-fun y171 () (_ BitVec 64))
(declare-fun y172 () (_ BitVec 64))
(declare-fun y173 () (_ BitVec 64))
(declare-fun z174 () (_ BitVec 64))
(declare-fun y175 () (_ BitVec 64))
(declare-fun y176 () (_ BitVec 64))
(declare-fun y177 () (_ BitVec 64))
(declare-fun y178 () (_ BitVec 64))
(declare-fun z179 () (_ BitVec 64))
(declare-fun w180 () (_ BitVec 64))
(declare-fun x181 () (_ BitVec 64))
(declare-fun x182 () (_ BitVec 64))
(declare-fun x183 () (_ BitVec 64))
(declare-fun z184 () (_ BitVec 64))
(declare-fun x185 () (_ BitVec 64))
(declare-fun x186 () (_ BitVec 64))
(declare-fun x187 () (_ BitVec 64))
(declare-fun y188 () (_ BitVec 64))
(declare-fun y189 () (_ BitVec 64))
(declare-fun y190 () (_ BitVec 64))
(declare-fun y191 () (_ BitVec 64))
(declare-fun z192 () (_ BitVec 64))
(declare-fun y193 () (_ BitVec 64))
(declare-fun y194 () (_ BitVec 64))
(declare-fun y195 () (_ BitVec 64))
(declare-fun y196 () (_ BitVec 64))
(declare-fun z197 () (_ BitVec 64))
(declare-fun w198 () (_ BitVec 64))
(declare-fun x199 () (_ BitVec 64))
(declare-fun x200 () (_ BitVec 64))
(declare-fun x201 () (_ BitVec 64))
(declare-fun z202 () (_ BitVec 64))
(declare-fun x203 () (_ BitVec 64))
(declare-fun x204 () (_ BitVec 64))
(declare-fun x205 () (_ BitVec 64))
(declare-fun y206 () (_ BitVec 64))
(declare-fun y207 () (_ BitVec 64))
(declare-fun y208 () (_ BitVec 64))
(declare-fun y209 () (_ BitVec 64))
(declare-fun z210 () (_ BitVec 64))
(declare-fun y211 () (_ BitVec 64))
(declare-fun y212 () (_ BitVec 64))
(declare-fun y213 () (_ BitVec 64))
(declare-fun y214 () (_ BitVec 64))
(declare-fun z215 () (_ BitVec 64))
(declare-fun w216 () (_ BitVec 64))
(declare-fun x217 () (_ BitVec 64))
(declare-fun x218 () (_ BitVec 64))
(declare-fun x219 () (_ BitVec 64))
(declare-fun z220 () (_ BitVec 64))
(declare-fun x221 () (_ BitVec 64))
(declare-fun x222 () (_ BitVec 64))
(declare-fun x223 () (_ BitVec 64))
(declare-fun y224 () (_ BitVec 64))
(declare-fun y225 () (_ BitVec 64))
(declare-fun y226 () (_ BitVec 64))
(declare-fun y227 () (_ BitVec 64))
(declare-fun z228 () (_ BitVec 64))
(declare-fun y229 () (_ BitVec 64))
(declare-fun y230 () (_ BitVec 64))
(declare-fun y231 () (_ BitVec 64))
(declare-fun y232 () (_ BitVec 64))
(declare-fun z233 () (_ BitVec 64))
(declare-fun w234 () (_ BitVec 64))
(declare-fun x235 () (_ BitVec 64))
(declare-fun x236 () (_ BitVec 64))
(declare-fun x237 () (_ BitVec 64))
(declare-fun z238 () (_ BitVec 64))
(declare-fun x239 () (_ BitVec 64))
(declare-fun x240 () (_ BitVec 64))
(declare-fun x241 () (_ BitVec 64))
(declare-fun y242 () (_ BitVec 64))
(declare-fun y243 () (_ BitVec 64))
(declare-fun y244 () (_ BitVec 64))
(declare-fun y245 () (_ BitVec 64))
(declare-fun z246 () (_ BitVec 64))
(declare-fun y247 () (_ BitVec 64))
(declare-fun y248 () (_ BitVec 64))
(declare-fun y249 () (_ BitVec 64))
(declare-fun y250 () (_ BitVec 64))
(declare-fun z251 () (_ BitVec 64))
(assert (bvslt digit_0 #x000000000000000a))
(assert (bvsge digit_0 #x0000000000000000))
(assert (bvslt digit_1 #x000000000000000a))
(assert (bvsge digit_1 #x0000000000000000))
(assert (bvslt digit_2 #x000000000000000a))
(assert (bvsge digit_2 #x0000000000000000))
(assert (bvslt digit_3 #x000000000000000a))
(assert (bvsge digit_3 #x0000000000000000))
(assert (bvslt digit_4 #x000000000000000a))
(assert (bvsge digit_4 #x0000000000000000))
(assert (bvslt digit_5 #x000000000000000a))
(assert (bvsge digit_5 #x0000000000000000))
(assert (bvslt digit_6 #x000000000000000a))
(assert (bvsge digit_6 #x0000000000000000))
(assert (bvslt digit_7 #x000000000000000a))
(assert (bvsge digit_7 #x0000000000000000))
(assert (bvslt digit_8 #x000000000000000a))
(assert (bvsge digit_8 #x0000000000000000))
(assert (bvslt digit_9 #x000000000000000a))
(assert (bvsge digit_9 #x0000000000000000))
(assert (bvslt digit_10 #x000000000000000a))
(assert (bvsge digit_10 #x0000000000000000))
(assert (bvslt digit_11 #x000000000000000a))
(assert (bvsge digit_11 #x0000000000000000))
(assert (bvslt digit_12 #x000000000000000a))
(assert (bvsge digit_12 #x0000000000000000))
(assert (bvslt digit_13 #x000000000000000a))
(assert (bvsge digit_13 #x0000000000000000))
(assert (= w0 digit_0))
(assert (= x1 (bvmul #x0000000000000000 #x0000000000000000)))
(assert (= x2 (bvadd x1 #x0000000000000000)))
(assert (not (= #x000000000000001a #x0000000000000000)))
(assert (= x3 (bvsrem x2 #x000000000000001a)))
(assert (not (= #x0000000000000001 #x0000000000000000)))
(assert (= z4 (bvsdiv #x0000000000000000 #x0000000000000001)))
(assert (= x5 (bvadd x3 #x000000000000000b)))
(assert (= x6 (ite (= x5 w0) #x0000000000000001 #x0000000000000000)))
(assert (= x7 (ite (= x6 #x0000000000000000) #x0000000000000001 #x0000000000000000)))
(assert (= y8 (bvmul #x0000000000000000 #x0000000000000000)))
(assert (= y9 (bvadd y8 #x0000000000000019)))
(assert (= y10 (bvmul y9 x7)))
(assert (= y11 (bvadd y10 #x0000000000000001)))
(assert (= z12 (bvmul z4 y11)))
(assert (= y13 (bvmul y11 #x0000000000000000)))
(assert (= y14 (bvadd y13 w0)))
(assert (= y15 (bvadd y14 #x0000000000000006)))
(assert (= y16 (bvmul y15 x7)))
(assert (= z17 (bvadd z12 y16)))
(assert (= w18 digit_1))
(assert (= x19 (bvmul x7 #x0000000000000000)))
(assert (= x20 (bvadd x19 z17)))
(assert (not (= #x000000000000001a #x0000000000000000)))
(assert (= x21 (bvsrem x20 #x000000000000001a)))
(assert (not (= #x0000000000000001 #x0000000000000000)))
(assert (= z22 (bvsdiv z17 #x0000000000000001)))
(assert (= x23 (bvadd x21 #x000000000000000b)))
(assert (= x24 (ite (= x23 w18) #x0000000000000001 #x0000000000000000)))
(assert (= x25 (ite (= x24 #x0000000000000000) #x0000000000000001 #x0000000000000000)))
(assert (= y26 (bvmul y16 #x0000000000000000)))
(assert (= y27 (bvadd y26 #x0000000000000019)))
(assert (= y28 (bvmul y27 x25)))
(assert (= y29 (bvadd y28 #x0000000000000001)))
(assert (= z30 (bvmul z22 y29)))
(assert (= y31 (bvmul y29 #x0000000000000000)))
(assert (= y32 (bvadd y31 w18)))
(assert (= y33 (bvadd y32 #x000000000000000c)))
(assert (= y34 (bvmul y33 x25)))
(assert (= z35 (bvadd z30 y34)))
(assert (= w36 digit_2))
(assert (= x37 (bvmul x25 #x0000000000000000)))
(assert (= x38 (bvadd x37 z35)))
(assert (not (= #x000000000000001a #x0000000000000000)))
(assert (= x39 (bvsrem x38 #x000000000000001a)))
(assert (not (= #x0000000000000001 #x0000000000000000)))
(assert (= z40 (bvsdiv z35 #x0000000000000001)))
(assert (= x41 (bvadd x39 #x000000000000000f)))
(assert (= x42 (ite (= x41 w36) #x0000000000000001 #x0000000000000000)))
(assert (= x43 (ite (= x42 #x0000000000000000) #x0000000000000001 #x0000000000000000)))
(assert (= y44 (bvmul y34 #x0000000000000000)))
(assert (= y45 (bvadd y44 #x0000000000000019)))
(assert (= y46 (bvmul y45 x43)))
(assert (= y47 (bvadd y46 #x0000000000000001)))
(assert (= z48 (bvmul z40 y47)))
(assert (= y49 (bvmul y47 #x0000000000000000)))
(assert (= y50 (bvadd y49 w36)))
(assert (= y51 (bvadd y50 #x0000000000000008)))
(assert (= y52 (bvmul y51 x43)))
(assert (= z53 (bvadd z48 y52)))
(assert (= w54 digit_3))
(assert (= x55 (bvmul x43 #x0000000000000000)))
(assert (= x56 (bvadd x55 z53)))
(assert (not (= #x000000000000001a #x0000000000000000)))
(assert (= x57 (bvsrem x56 #x000000000000001a)))
(assert (not (= #x000000000000001a #x0000000000000000)))
(assert (= z58 (bvsdiv z53 #x000000000000001a)))
(assert (= x59 (bvadd x57 #xfffffffffffffff5)))
(assert (= x60 (ite (= x59 w54) #x0000000000000001 #x0000000000000000)))
(assert (= x61 (ite (= x60 #x0000000000000000) #x0000000000000001 #x0000000000000000)))
(assert (= y62 (bvmul y52 #x0000000000000000)))
(assert (= y63 (bvadd y62 #x0000000000000019)))
(assert (= y64 (bvmul y63 x61)))
(assert (= y65 (bvadd y64 #x0000000000000001)))
(assert (= z66 (bvmul z58 y65)))
(assert (= y67 (bvmul y65 #x0000000000000000)))
(assert (= y68 (bvadd y67 w54)))
(assert (= y69 (bvadd y68 #x0000000000000007)))
(assert (= y70 (bvmul y69 x61)))
(assert (= z71 (bvadd z66 y70)))
(assert (= w72 digit_4))
(assert (= x73 (bvmul x61 #x0000000000000000)))
(assert (= x74 (bvadd x73 z71)))
(assert (not (= #x000000000000001a #x0000000000000000)))
(assert (= x75 (bvsrem x74 #x000000000000001a)))
(assert (not (= #x0000000000000001 #x0000000000000000)))
(assert (= z76 (bvsdiv z71 #x0000000000000001)))
(assert (= x77 (bvadd x75 #x000000000000000f)))
(assert (= x78 (ite (= x77 w72) #x0000000000000001 #x0000000000000000)))
(assert (= x79 (ite (= x78 #x0000000000000000) #x0000000000000001 #x0000000000000000)))
(assert (= y80 (bvmul y70 #x0000000000000000)))
(assert (= y81 (bvadd y80 #x0000000000000019)))
(assert (= y82 (bvmul y81 x79)))
(assert (= y83 (bvadd y82 #x0000000000000001)))
(assert (= z84 (bvmul z76 y83)))
(assert (= y85 (bvmul y83 #x0000000000000000)))
(assert (= y86 (bvadd y85 w72)))
(assert (= y87 (bvadd y86 #x0000000000000007)))
(assert (= y88 (bvmul y87 x79)))
(assert (= z89 (bvadd z84 y88)))
(assert (= w90 digit_5))
(assert (= x91 (bvmul x79 #x0000000000000000)))
(assert (= x92 (bvadd x91 z89)))
(assert (not (= #x000000000000001a #x0000000000000000)))
(assert (= x93 (bvsrem x92 #x000000000000001a)))
(assert (not (= #x0000000000000001 #x0000000000000000)))
(assert (= z94 (bvsdiv z89 #x0000000000000001)))
(assert (= x95 (bvadd x93 #x000000000000000f)))
(assert (= x96 (ite (= x95 w90) #x0000000000000001 #x0000000000000000)))
(assert (= x97 (ite (= x96 #x0000000000000000) #x0000000000000001 #x0000000000000000)))
(assert (= y98 (bvmul y88 #x0000000000000000)))
(assert (= y99 (bvadd y98 #x0000000000000019)))
(assert (= y100 (bvmul y99 x97)))
(assert (= y101 (bvadd y100 #x0000000000000001)))
(assert (= z102 (bvmul z94 y101)))
(assert (= y103 (bvmul y101 #x0000000000000000)))
(assert (= y104 (bvadd y103 w90)))
(assert (= y105 (bvadd y104 #x000000000000000c)))
(assert (= y106 (bvmul y105 x97)))
(assert (= z107 (bvadd z102 y106)))
(assert (= w108 digit_6))
(assert (= x109 (bvmul x97 #x0000000000000000)))
(assert (= x110 (bvadd x109 z107)))
(assert (not (= #x000000000000001a #x0000000000000000)))
(assert (= x111 (bvsrem x110 #x000000000000001a)))
(assert (not (= #x0000000000000001 #x0000000000000000)))
(assert (= z112 (bvsdiv z107 #x0000000000000001)))
(assert (= x113 (bvadd x111 #x000000000000000e)))
(assert (= x114 (ite (= x113 w108) #x0000000000000001 #x0000000000000000)))
(assert (= x115 (ite (= x114 #x0000000000000000) #x0000000000000001 #x0000000000000000)))
(assert (= y116 (bvmul y106 #x0000000000000000)))
(assert (= y117 (bvadd y116 #x0000000000000019)))
(assert (= y118 (bvmul y117 x115)))
(assert (= y119 (bvadd y118 #x0000000000000001)))
(assert (= z120 (bvmul z112 y119)))
(assert (= y121 (bvmul y119 #x0000000000000000)))
(assert (= y122 (bvadd y121 w108)))
(assert (= y123 (bvadd y122 #x0000000000000002)))
(assert (= y124 (bvmul y123 x115)))
(assert (= z125 (bvadd z120 y124)))
(assert (= w126 digit_7))
(assert (= x127 (bvmul x115 #x0000000000000000)))
(assert (= x128 (bvadd x127 z125)))
(assert (not (= #x000000000000001a #x0000000000000000)))
(assert (= x129 (bvsrem x128 #x000000000000001a)))
(assert (not (= #x000000000000001a #x0000000000000000)))
(assert (= z130 (bvsdiv z125 #x000000000000001a)))
(assert (= x131 (bvadd x129 #xfffffffffffffff9)))
(assert (= x132 (ite (= x131 w126) #x0000000000000001 #x0000000000000000)))
(assert (= x133 (ite (= x132 #x0000000000000000) #x0000000000000001 #x0000000000000000)))
(assert (= y134 (bvmul y124 #x0000000000000000)))
(assert (= y135 (bvadd y134 #x0000000000000019)))
(assert (= y136 (bvmul y135 x133)))
(assert (= y137 (bvadd y136 #x0000000000000001)))
(assert (= z138 (bvmul z130 y137)))
(assert (= y139 (bvmul y137 #x0000000000000000)))
(assert (= y140 (bvadd y139 w126)))
(assert (= y141 (bvadd y140 #x000000000000000f)))
(assert (= y142 (bvmul y141 x133)))
(assert (= z143 (bvadd z138 y142)))
(assert (= w144 digit_8))
(assert (= x145 (bvmul x133 #x0000000000000000)))
(assert (= x146 (bvadd x145 z143)))
(assert (not (= #x000000000000001a #x0000000000000000)))
(assert (= x147 (bvsrem x146 #x000000000000001a)))
(assert (not (= #x0000000000000001 #x0000000000000000)))
(assert (= z148 (bvsdiv z143 #x0000000000000001)))
(assert (= x149 (bvadd x147 #x000000000000000c)))
(assert (= x150 (ite (= x149 w144) #x0000000000000001 #x0000000000000000)))
(assert (= x151 (ite (= x150 #x0000000000000000) #x0000000000000001 #x0000000000000000)))
(assert (= y152 (bvmul y142 #x0000000000000000)))
(assert (= y153 (bvadd y152 #x0000000000000019)))
(assert (= y154 (bvmul y153 x151)))
(assert (= y155 (bvadd y154 #x0000000000000001)))
(assert (= z156 (bvmul z148 y155)))
(assert (= y157 (bvmul y155 #x0000000000000000)))
(assert (= y158 (bvadd y157 w144)))
(assert (= y159 (bvadd y158 #x0000000000000004)))
(assert (= y160 (bvmul y159 x151)))
(assert (= z161 (bvadd z156 y160)))
(assert (= w162 digit_9))
(assert (= x163 (bvmul x151 #x0000000000000000)))
(assert (= x164 (bvadd x163 z161)))
(assert (not (= #x000000000000001a #x0000000000000000)))
(assert (= x165 (bvsrem x164 #x000000000000001a)))
(assert (not (= #x000000000000001a #x0000000000000000)))
(assert (= z166 (bvsdiv z161 #x000000000000001a)))
(assert (= x167 (bvadd x165 #xfffffffffffffffa)))
(assert (= x168 (ite (= x167 w162) #x0000000000000001 #x0000000000000000)))
(assert (= x169 (ite (= x168 #x0000000000000000) #x0000000000000001 #x0000000000000000)))
(assert (= y170 (bvmul y160 #x0000000000000000)))
(assert (= y171 (bvadd y170 #x0000000000000019)))
(assert (= y172 (bvmul y171 x169)))
(assert (= y173 (bvadd y172 #x0000000000000001)))
(assert (= z174 (bvmul z166 y173)))
(assert (= y175 (bvmul y173 #x0000000000000000)))
(assert (= y176 (bvadd y175 w162)))
(assert (= y177 (bvadd y176 #x0000000000000005)))
(assert (= y178 (bvmul y177 x169)))
(assert (= z179 (bvadd z174 y178)))
(assert (= w180 digit_10))
(assert (= x181 (bvmul x169 #x0000000000000000)))
(assert (= x182 (bvadd x181 z179)))
(assert (not (= #x000000000000001a #x0000000000000000)))
(assert (= x183 (bvsrem x182 #x000000000000001a)))
(assert (not (= #x000000000000001a #x0000000000000000)))
(assert (= z184 (bvsdiv z179 #x000000000000001a)))
(assert (= x185 (bvadd x183 #xfffffffffffffff6)))
(assert (= x186 (ite (= x185 w180) #x0000000000000001 #x0000000000000000)))
(assert (= x187 (ite (= x186 #x0000000000000000) #x0000000000000001 #x0000000000000000)))
(assert (= y188 (bvmul y178 #x0000000000000000)))
(assert (= y189 (bvadd y188 #x0000000000000019)))
(assert (= y190 (bvmul y189 x187)))
(assert (= y191 (bvadd y190 #x0000000000000001)))
(assert (= z192 (bvmul z184 y191)))
(assert (= y193 (bvmul y191 #x0000000000000000)))
(assert (= y194 (bvadd y193 w180)))
(assert (= y195 (bvadd y194 #x000000000000000c)))
(assert (= y196 (bvmul y195 x187)))
(assert (= z197 (bvadd z192 y196)))
(assert (= w198 digit_11))
(assert (= x199 (bvmul x187 #x0000000000000000)))
(assert (= x200 (bvadd x199 z197)))
(assert (not (= #x000000000000001a #x0000000000000000)))
(assert (= x201 (bvsrem x200 #x000000000000001a)))
(assert (not (= #x000000000000001a #x0000000000000000)))
(assert (= z202 (bvsdiv z197 #x000000000000001a)))
(assert (= x203 (bvadd x201 #xfffffffffffffff1)))
(assert (= x204 (ite (= x203 w198) #x0000000000000001 #x0000000000000000)))
(assert (= x205 (ite (= x204 #x0000000000000000) #x0000000000000001 #x0000000000000000)))
(assert (= y206 (bvmul y196 #x0000000000000000)))
(assert (= y207 (bvadd y206 #x0000000000000019)))
(assert (= y208 (bvmul y207 x205)))
(assert (= y209 (bvadd y208 #x0000000000000001)))
(assert (= z210 (bvmul z202 y209)))
(assert (= y211 (bvmul y209 #x0000000000000000)))
(assert (= y212 (bvadd y211 w198)))
(assert (= y213 (bvadd y212 #x000000000000000b)))
(assert (= y214 (bvmul y213 x205)))
(assert (= z215 (bvadd z210 y214)))
(assert (= w216 digit_12))
(assert (= x217 (bvmul x205 #x0000000000000000)))
(assert (= x218 (bvadd x217 z215)))
(assert (not (= #x000000000000001a #x0000000000000000)))
(assert (= x219 (bvsrem x218 #x000000000000001a)))
(assert (not (= #x000000000000001a #x0000000000000000)))
(assert (= z220 (bvsdiv z215 #x000000000000001a)))
(assert (= x221 (bvadd x219 #xfffffffffffffff7)))
(assert (= x222 (ite (= x221 w216) #x0000000000000001 #x0000000000000000)))
(assert (= x223 (ite (= x222 #x0000000000000000) #x0000000000000001 #x0000000000000000)))
(assert (= y224 (bvmul y214 #x0000000000000000)))
(assert (= y225 (bvadd y224 #x0000000000000019)))
(assert (= y226 (bvmul y225 x223)))
(assert (= y227 (bvadd y226 #x0000000000000001)))
(assert (= z228 (bvmul z220 y227)))
(assert (= y229 (bvmul y227 #x0000000000000000)))
(assert (= y230 (bvadd y229 w216)))
(assert (= y231 (bvadd y230 #x000000000000000d)))
(assert (= y232 (bvmul y231 x223)))
(assert (= z233 (bvadd z228 y232)))
(assert (= w234 digit_13))
(assert (= x235 (bvmul x223 #x0000000000000000)))
(assert (= x236 (bvadd x235 z233)))
(assert (not (= #x000000000000001a #x0000000000000000)))
(assert (= x237 (bvsrem x236 #x000000000000001a)))
(assert (not (= #x000000000000001a #x0000000000000000)))
(assert (= z238 (bvsdiv z233 #x000000000000001a)))
(assert (= x239 (bvadd x237 #x0000000000000000)))
(assert (= x240 (ite (= x239 w234) #x0000000000000001 #x0000000000000000)))
(assert (= x241 (ite (= x240 #x0000000000000000) #x0000000000000001 #x0000000000000000)))
(assert (= y242 (bvmul y232 #x0000000000000000)))
(assert (= y243 (bvadd y242 #x0000000000000019)))
(assert (= y244 (bvmul y243 x241)))
(assert (= y245 (bvadd y244 #x0000000000000001)))
(assert (= z246 (bvmul z238 y245)))
(assert (= y247 (bvmul y245 #x0000000000000000)))
(assert (= y248 (bvadd y247 w234)))
(assert (= y249 (bvadd y248 #x0000000000000007)))
(assert (= y250 (bvmul y249 x241)))
(assert (= z251 (bvadd z246 y250)))
(assert (= z251 #x0000000000000000))
(maximize (let ((a!1 (bvadd (bvmul (bvadd (bvmul digit_0 #x000000000000000a) digit_1)
                         #x000000000000000a)
                  digit_2)))
(let ((a!2 (bvadd (bvmul (bvadd (bvmul a!1 #x000000000000000a) digit_3)
                         #x000000000000000a)
                  digit_4)))
(let ((a!3 (bvadd (bvmul (bvadd (bvmul a!2 #x000000000000000a) digit_5)
                         #x000000000000000a)
                  digit_6)))
(let ((a!4 (bvadd (bvmul (bvadd (bvmul a!3 #x000000000000000a) digit_7)
                         #x000000000000000a)
                  digit_8)))
(let ((a!5 (bvadd (bvmul (bvadd (bvmul a!4 #x000000000000000a) digit_9)
                         #x000000000000000a)
                  digit_10)))
(let ((a!6 (bvadd (bvmul (bvadd (bvmul a!5 #x000000000000000a) digit_11)
                         #x000000000000000a)
                  digit_12)))
  (bvadd (bvmul a!6 #x000000000000000a) digit_13))))))))
(check-sat)

